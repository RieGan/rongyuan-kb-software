// source: driver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.driver.CheckSumType', null, global);
goog.exportSymbol('proto.driver.DJDev', null, global);
goog.exportSymbol('proto.driver.DJDev.OneofdevCase', null, global);
goog.exportSymbol('proto.driver.DangleCommon', null, global);
goog.exportSymbol('proto.driver.DangleDevType', null, global);
goog.exportSymbol('proto.driver.DangleStatus', null, global);
goog.exportSymbol('proto.driver.DangleStatus.DangledevCase', null, global);
goog.exportSymbol('proto.driver.Device', null, global);
goog.exportSymbol('proto.driver.DeviceList', null, global);
goog.exportSymbol('proto.driver.DeviceListChangeType', null, global);
goog.exportSymbol('proto.driver.DeviceType', null, global);
goog.exportSymbol('proto.driver.Empty', null, global);
goog.exportSymbol('proto.driver.LightType', null, global);
goog.exportSymbol('proto.driver.ReadMsg', null, global);
goog.exportSymbol('proto.driver.ResRead', null, global);
goog.exportSymbol('proto.driver.ResSend', null, global);
goog.exportSymbol('proto.driver.SendMsg', null, global);
goog.exportSymbol('proto.driver.SetLight', null, global);
goog.exportSymbol('proto.driver.Status24', null, global);
goog.exportSymbol('proto.driver.SystemInfo', null, global);
goog.exportSymbol('proto.driver.VenderMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.Empty.displayName = 'proto.driver.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.ResSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.ResSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.ResSend.displayName = 'proto.driver.ResSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.ResRead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.ResRead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.ResRead.displayName = 'proto.driver.ResRead';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.SendMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.SendMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.SendMsg.displayName = 'proto.driver.SendMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.ReadMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.ReadMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.ReadMsg.displayName = 'proto.driver.ReadMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.DeviceList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.driver.DeviceList.repeatedFields_, null);
};
goog.inherits(proto.driver.DeviceList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.DeviceList.displayName = 'proto.driver.DeviceList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.DJDev = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.DJDev.oneofGroups_);
};
goog.inherits(proto.driver.DJDev, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.DJDev.displayName = 'proto.driver.DJDev';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.Device.displayName = 'proto.driver.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.Status24 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.Status24, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.Status24.displayName = 'proto.driver.Status24';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.DangleStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.driver.DangleStatus.oneofGroups_);
};
goog.inherits(proto.driver.DangleStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.DangleStatus.displayName = 'proto.driver.DangleStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.DangleCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.DangleCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.DangleCommon.displayName = 'proto.driver.DangleCommon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.VenderMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.VenderMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.VenderMsg.displayName = 'proto.driver.VenderMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.SystemInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.SystemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.SystemInfo.displayName = 'proto.driver.SystemInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.driver.SetLight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.driver.SetLight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.driver.SetLight.displayName = 'proto.driver.SetLight';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.Empty}
 */
proto.driver.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.Empty;
  return proto.driver.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.Empty}
 */
proto.driver.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.ResSend.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.ResSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.ResSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ResSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.ResSend}
 */
proto.driver.ResSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.ResSend;
  return proto.driver.ResSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.ResSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.ResSend}
 */
proto.driver.ResSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.ResSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.ResSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.ResSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ResSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string err = 1;
 * @return {string}
 */
proto.driver.ResSend.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.ResSend} returns this
 */
proto.driver.ResSend.prototype.setErr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.ResRead.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.ResRead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.ResRead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ResRead.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msg: msg.getMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.ResRead}
 */
proto.driver.ResRead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.ResRead;
  return proto.driver.ResRead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.ResRead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.ResRead}
 */
proto.driver.ResRead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.ResRead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.ResRead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.ResRead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ResRead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string err = 1;
 * @return {string}
 */
proto.driver.ResRead.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.ResRead} returns this
 */
proto.driver.ResRead.prototype.setErr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes msg = 2;
 * @return {!(string|Uint8Array)}
 */
proto.driver.ResRead.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes msg = 2;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.driver.ResRead.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.driver.ResRead.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.driver.ResRead} returns this
 */
proto.driver.ResRead.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.SendMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.SendMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.SendMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.SendMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicepath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msg: msg.getMsg_asB64(),
    checksumtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dangledevtype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.SendMsg}
 */
proto.driver.SendMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.SendMsg;
  return proto.driver.SendMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.SendMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.SendMsg}
 */
proto.driver.SendMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicepath(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {!proto.driver.CheckSumType} */ (reader.readEnum());
      msg.setChecksumtype(value);
      break;
    case 4:
      var value = /** @type {!proto.driver.DangleDevType} */ (reader.readEnum());
      msg.setDangledevtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.SendMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.SendMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.SendMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.SendMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicepath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChecksumtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDangledevtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string devicePath = 1;
 * @return {string}
 */
proto.driver.SendMsg.prototype.getDevicepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.SendMsg} returns this
 */
proto.driver.SendMsg.prototype.setDevicepath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes msg = 2;
 * @return {!(string|Uint8Array)}
 */
proto.driver.SendMsg.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes msg = 2;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.driver.SendMsg.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.driver.SendMsg.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.driver.SendMsg} returns this
 */
proto.driver.SendMsg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional CheckSumType checkSumType = 3;
 * @return {!proto.driver.CheckSumType}
 */
proto.driver.SendMsg.prototype.getChecksumtype = function() {
  return /** @type {!proto.driver.CheckSumType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.driver.CheckSumType} value
 * @return {!proto.driver.SendMsg} returns this
 */
proto.driver.SendMsg.prototype.setChecksumtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional DangleDevType dangleDevType = 4;
 * @return {!proto.driver.DangleDevType}
 */
proto.driver.SendMsg.prototype.getDangledevtype = function() {
  return /** @type {!proto.driver.DangleDevType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.driver.DangleDevType} value
 * @return {!proto.driver.SendMsg} returns this
 */
proto.driver.SendMsg.prototype.setDangledevtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.ReadMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.ReadMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.ReadMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ReadMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicepath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.ReadMsg}
 */
proto.driver.ReadMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.ReadMsg;
  return proto.driver.ReadMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.ReadMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.ReadMsg}
 */
proto.driver.ReadMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.ReadMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.ReadMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.ReadMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.ReadMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicepath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string devicePath = 1;
 * @return {string}
 */
proto.driver.ReadMsg.prototype.getDevicepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.ReadMsg} returns this
 */
proto.driver.ReadMsg.prototype.setDevicepath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.driver.DeviceList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.DeviceList.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.DeviceList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.DeviceList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DeviceList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devlistList: jspb.Message.toObjectList(msg.getDevlistList(),
    proto.driver.DJDev.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.DeviceList}
 */
proto.driver.DeviceList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.DeviceList;
  return proto.driver.DeviceList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.DeviceList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.DeviceList}
 */
proto.driver.DeviceList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.DJDev;
      reader.readMessage(value,proto.driver.DJDev.deserializeBinaryFromReader);
      msg.addDevlist(value);
      break;
    case 2:
      var value = /** @type {!proto.driver.DeviceListChangeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.DeviceList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.DeviceList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.DeviceList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DeviceList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.driver.DJDev.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated DJDev devList = 1;
 * @return {!Array<!proto.driver.DJDev>}
 */
proto.driver.DeviceList.prototype.getDevlistList = function() {
  return /** @type{!Array<!proto.driver.DJDev>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.driver.DJDev, 1));
};


/**
 * @param {!Array<!proto.driver.DJDev>} value
 * @return {!proto.driver.DeviceList} returns this
*/
proto.driver.DeviceList.prototype.setDevlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.driver.DJDev=} opt_value
 * @param {number=} opt_index
 * @return {!proto.driver.DJDev}
 */
proto.driver.DeviceList.prototype.addDevlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.driver.DJDev, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.driver.DeviceList} returns this
 */
proto.driver.DeviceList.prototype.clearDevlistList = function() {
  return this.setDevlistList([]);
};


/**
 * optional DeviceListChangeType type = 2;
 * @return {!proto.driver.DeviceListChangeType}
 */
proto.driver.DeviceList.prototype.getType = function() {
  return /** @type {!proto.driver.DeviceListChangeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.driver.DeviceListChangeType} value
 * @return {!proto.driver.DeviceList} returns this
 */
proto.driver.DeviceList.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.DJDev.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.DJDev.OneofdevCase = {
  ONEOFDEV_NOT_SET: 0,
  DEV: 1,
  DANGLECOMMONDEV: 2
};

/**
 * @return {proto.driver.DJDev.OneofdevCase}
 */
proto.driver.DJDev.prototype.getOneofdevCase = function() {
  return /** @type {proto.driver.DJDev.OneofdevCase} */(jspb.Message.computeOneofCase(this, proto.driver.DJDev.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.DJDev.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.DJDev.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.DJDev} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DJDev.toObject = function(includeInstance, msg) {
  var f, obj = {
    dev: (f = msg.getDev()) && proto.driver.Device.toObject(includeInstance, f),
    danglecommondev: (f = msg.getDanglecommondev()) && proto.driver.DangleCommon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.DJDev}
 */
proto.driver.DJDev.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.DJDev;
  return proto.driver.DJDev.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.DJDev} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.DJDev}
 */
proto.driver.DJDev.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.Device;
      reader.readMessage(value,proto.driver.Device.deserializeBinaryFromReader);
      msg.setDev(value);
      break;
    case 2:
      var value = new proto.driver.DangleCommon;
      reader.readMessage(value,proto.driver.DangleCommon.deserializeBinaryFromReader);
      msg.setDanglecommondev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.DJDev.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.DJDev.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.DJDev} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DJDev.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDev();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.Device.serializeBinaryToWriter
    );
  }
  f = message.getDanglecommondev();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.DangleCommon.serializeBinaryToWriter
    );
  }
};


/**
 * optional Device dev = 1;
 * @return {?proto.driver.Device}
 */
proto.driver.DJDev.prototype.getDev = function() {
  return /** @type{?proto.driver.Device} */ (
    jspb.Message.getWrapperField(this, proto.driver.Device, 1));
};


/**
 * @param {?proto.driver.Device|undefined} value
 * @return {!proto.driver.DJDev} returns this
*/
proto.driver.DJDev.prototype.setDev = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.DJDev.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DJDev} returns this
 */
proto.driver.DJDev.prototype.clearDev = function() {
  return this.setDev(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DJDev.prototype.hasDev = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DangleCommon dangleCommonDev = 2;
 * @return {?proto.driver.DangleCommon}
 */
proto.driver.DJDev.prototype.getDanglecommondev = function() {
  return /** @type{?proto.driver.DangleCommon} */ (
    jspb.Message.getWrapperField(this, proto.driver.DangleCommon, 2));
};


/**
 * @param {?proto.driver.DangleCommon|undefined} value
 * @return {!proto.driver.DJDev} returns this
*/
proto.driver.DJDev.prototype.setDanglecommondev = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.DJDev.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DJDev} returns this
 */
proto.driver.DJDev.prototype.clearDanglecommondev = function() {
  return this.setDanglecommondev(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DJDev.prototype.hasDanglecommondev = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    devtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    is24: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    path: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, 0),
    battery: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isonline: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    vid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.Device}
 */
proto.driver.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.Device;
  return proto.driver.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.Device}
 */
proto.driver.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.driver.DeviceType} */ (reader.readEnum());
      msg.setDevtype(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIs24(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattery(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsonline(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIs24();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBattery();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getIsonline();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getVid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional DeviceType devType = 1;
 * @return {!proto.driver.DeviceType}
 */
proto.driver.Device.prototype.getDevtype = function() {
  return /** @type {!proto.driver.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.driver.DeviceType} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setDevtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is24 = 2;
 * @return {boolean}
 */
proto.driver.Device.prototype.getIs24 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setIs24 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.driver.Device.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 id = 4;
 * @return {number}
 */
proto.driver.Device.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 battery = 5;
 * @return {number}
 */
proto.driver.Device.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setBattery = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool isOnline = 6;
 * @return {boolean}
 */
proto.driver.Device.prototype.getIsonline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setIsonline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 vid = 7;
 * @return {number}
 */
proto.driver.Device.prototype.getVid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setVid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 pid = 8;
 * @return {number}
 */
proto.driver.Device.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.Device} returns this
 */
proto.driver.Device.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.Status24.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.Status24.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.Status24} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.Status24.toObject = function(includeInstance, msg) {
  var f, obj = {
    battery: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isOnline: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.Status24}
 */
proto.driver.Status24.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.Status24;
  return proto.driver.Status24.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.Status24} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.Status24}
 */
proto.driver.Status24.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.Status24.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.Status24.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.Status24} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.Status24.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattery();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIsOnline();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 battery = 1;
 * @return {number}
 */
proto.driver.Status24.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.Status24} returns this
 */
proto.driver.Status24.prototype.setBattery = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_online = 2;
 * @return {boolean}
 */
proto.driver.Status24.prototype.getIsOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.driver.Status24} returns this
 */
proto.driver.Status24.prototype.setIsOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.driver.DangleStatus.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.driver.DangleStatus.DangledevCase = {
  DANGLEDEV_NOT_SET: 0,
  EMPTY: 1,
  STATUS: 2
};

/**
 * @return {proto.driver.DangleStatus.DangledevCase}
 */
proto.driver.DangleStatus.prototype.getDangledevCase = function() {
  return /** @type {proto.driver.DangleStatus.DangledevCase} */(jspb.Message.computeOneofCase(this, proto.driver.DangleStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.DangleStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.DangleStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.DangleStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DangleStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    empty: (f = msg.getEmpty()) && proto.driver.Empty.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.driver.Status24.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.DangleStatus}
 */
proto.driver.DangleStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.DangleStatus;
  return proto.driver.DangleStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.DangleStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.DangleStatus}
 */
proto.driver.DangleStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.Empty;
      reader.readMessage(value,proto.driver.Empty.deserializeBinaryFromReader);
      msg.setEmpty(value);
      break;
    case 2:
      var value = new proto.driver.Status24;
      reader.readMessage(value,proto.driver.Status24.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.DangleStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.DangleStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.DangleStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DangleStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmpty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.Empty.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.Status24.serializeBinaryToWriter
    );
  }
};


/**
 * optional Empty empty = 1;
 * @return {?proto.driver.Empty}
 */
proto.driver.DangleStatus.prototype.getEmpty = function() {
  return /** @type{?proto.driver.Empty} */ (
    jspb.Message.getWrapperField(this, proto.driver.Empty, 1));
};


/**
 * @param {?proto.driver.Empty|undefined} value
 * @return {!proto.driver.DangleStatus} returns this
*/
proto.driver.DangleStatus.prototype.setEmpty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.driver.DangleStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DangleStatus} returns this
 */
proto.driver.DangleStatus.prototype.clearEmpty = function() {
  return this.setEmpty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DangleStatus.prototype.hasEmpty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status24 status = 2;
 * @return {?proto.driver.Status24}
 */
proto.driver.DangleStatus.prototype.getStatus = function() {
  return /** @type{?proto.driver.Status24} */ (
    jspb.Message.getWrapperField(this, proto.driver.Status24, 2));
};


/**
 * @param {?proto.driver.Status24|undefined} value
 * @return {!proto.driver.DangleStatus} returns this
*/
proto.driver.DangleStatus.prototype.setStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.driver.DangleStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DangleStatus} returns this
 */
proto.driver.DangleStatus.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DangleStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.DangleCommon.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.DangleCommon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.DangleCommon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DangleCommon.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyboard: (f = msg.getKeyboard()) && proto.driver.DangleStatus.toObject(includeInstance, f),
    mouse: (f = msg.getMouse()) && proto.driver.DangleStatus.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 3, ""),
    keyboardId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mouseId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    vid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.DangleCommon}
 */
proto.driver.DangleCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.DangleCommon;
  return proto.driver.DangleCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.DangleCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.DangleCommon}
 */
proto.driver.DangleCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.driver.DangleStatus;
      reader.readMessage(value,proto.driver.DangleStatus.deserializeBinaryFromReader);
      msg.setKeyboard(value);
      break;
    case 2:
      var value = new proto.driver.DangleStatus;
      reader.readMessage(value,proto.driver.DangleStatus.deserializeBinaryFromReader);
      msg.setMouse(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyboardId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMouseId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.DangleCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.DangleCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.DangleCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.DangleCommon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyboard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.driver.DangleStatus.serializeBinaryToWriter
    );
  }
  f = message.getMouse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.driver.DangleStatus.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKeyboardId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMouseId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getVid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional DangleStatus keyboard = 1;
 * @return {?proto.driver.DangleStatus}
 */
proto.driver.DangleCommon.prototype.getKeyboard = function() {
  return /** @type{?proto.driver.DangleStatus} */ (
    jspb.Message.getWrapperField(this, proto.driver.DangleStatus, 1));
};


/**
 * @param {?proto.driver.DangleStatus|undefined} value
 * @return {!proto.driver.DangleCommon} returns this
*/
proto.driver.DangleCommon.prototype.setKeyboard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.clearKeyboard = function() {
  return this.setKeyboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DangleCommon.prototype.hasKeyboard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DangleStatus mouse = 2;
 * @return {?proto.driver.DangleStatus}
 */
proto.driver.DangleCommon.prototype.getMouse = function() {
  return /** @type{?proto.driver.DangleStatus} */ (
    jspb.Message.getWrapperField(this, proto.driver.DangleStatus, 2));
};


/**
 * @param {?proto.driver.DangleStatus|undefined} value
 * @return {!proto.driver.DangleCommon} returns this
*/
proto.driver.DangleCommon.prototype.setMouse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.clearMouse = function() {
  return this.setMouse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.driver.DangleCommon.prototype.hasMouse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.driver.DangleCommon.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 keyboard_id = 5;
 * @return {number}
 */
proto.driver.DangleCommon.prototype.getKeyboardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.setKeyboardId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 mouse_id = 6;
 * @return {number}
 */
proto.driver.DangleCommon.prototype.getMouseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.setMouseId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 vid = 7;
 * @return {number}
 */
proto.driver.DangleCommon.prototype.getVid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.setVid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 pid = 8;
 * @return {number}
 */
proto.driver.DangleCommon.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.DangleCommon} returns this
 */
proto.driver.DangleCommon.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.VenderMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.VenderMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.VenderMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.VenderMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: msg.getMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.VenderMsg}
 */
proto.driver.VenderMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.VenderMsg;
  return proto.driver.VenderMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.VenderMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.VenderMsg}
 */
proto.driver.VenderMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.VenderMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.VenderMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.VenderMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.VenderMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes msg = 1;
 * @return {!(string|Uint8Array)}
 */
proto.driver.VenderMsg.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes msg = 1;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.driver.VenderMsg.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.driver.VenderMsg.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.driver.VenderMsg} returns this
 */
proto.driver.VenderMsg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.SystemInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.SystemInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.SystemInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.SystemInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    diskSpaceTotal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    diskSpceAvailable: jspb.Message.getFieldWithDefault(msg, 2, 0),
    netWorkTotalUp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    netWorkTotalDown: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cpuTemperater: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    memTotal: jspb.Message.getFieldWithDefault(msg, 6, 0),
    memUsed: jspb.Message.getFieldWithDefault(msg, 7, 0),
    cpuUsage: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.SystemInfo}
 */
proto.driver.SystemInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.SystemInfo;
  return proto.driver.SystemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.SystemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.SystemInfo}
 */
proto.driver.SystemInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiskSpaceTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiskSpceAvailable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetWorkTotalUp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetWorkTotalDown(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCpuTemperater(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemTotal(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemUsed(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCpuUsage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.SystemInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.SystemInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.SystemInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.SystemInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiskSpaceTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDiskSpceAvailable();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNetWorkTotalUp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNetWorkTotalDown();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCpuTemperater();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getMemTotal();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMemUsed();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getCpuUsage();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional uint64 disk_space_total = 1;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getDiskSpaceTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setDiskSpaceTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 disk_spce_available = 2;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getDiskSpceAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setDiskSpceAvailable = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 net_work_total_up = 3;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getNetWorkTotalUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setNetWorkTotalUp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 net_work_total_down = 4;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getNetWorkTotalDown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setNetWorkTotalDown = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float cpu_temperater = 5;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getCpuTemperater = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setCpuTemperater = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional uint64 mem_total = 6;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getMemTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setMemTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 mem_used = 7;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getMemUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setMemUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float cpu_usage = 8;
 * @return {number}
 */
proto.driver.SystemInfo.prototype.getCpuUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SystemInfo} returns this
 */
proto.driver.SystemInfo.prototype.setCpuUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.driver.SetLight.prototype.toObject = function(opt_includeInstance) {
  return proto.driver.SetLight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.driver.SetLight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.SetLight.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicepath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lighttype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    screenId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dangledevtype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.driver.SetLight}
 */
proto.driver.SetLight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.driver.SetLight;
  return proto.driver.SetLight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.driver.SetLight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.driver.SetLight}
 */
proto.driver.SetLight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicepath(value);
      break;
    case 2:
      var value = /** @type {!proto.driver.LightType} */ (reader.readEnum());
      msg.setLighttype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScreenId(value);
      break;
    case 4:
      var value = /** @type {!proto.driver.DangleDevType} */ (reader.readEnum());
      msg.setDangledevtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.driver.SetLight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.driver.SetLight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.driver.SetLight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.driver.SetLight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicepath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLighttype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScreenId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDangledevtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string devicePath = 1;
 * @return {string}
 */
proto.driver.SetLight.prototype.getDevicepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.driver.SetLight} returns this
 */
proto.driver.SetLight.prototype.setDevicepath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LightType lightType = 2;
 * @return {!proto.driver.LightType}
 */
proto.driver.SetLight.prototype.getLighttype = function() {
  return /** @type {!proto.driver.LightType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.driver.LightType} value
 * @return {!proto.driver.SetLight} returns this
 */
proto.driver.SetLight.prototype.setLighttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 screen_id = 3;
 * @return {number}
 */
proto.driver.SetLight.prototype.getScreenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.driver.SetLight} returns this
 */
proto.driver.SetLight.prototype.setScreenId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DangleDevType dangleDevType = 4;
 * @return {!proto.driver.DangleDevType}
 */
proto.driver.SetLight.prototype.getDangledevtype = function() {
  return /** @type {!proto.driver.DangleDevType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.driver.DangleDevType} value
 * @return {!proto.driver.SetLight} returns this
 */
proto.driver.SetLight.prototype.setDangledevtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.driver.DangleDevType = {
  DANGLEDEVTYPENONE: 0,
  KEYBOARD: 1,
  MOUSE: 2
};

/**
 * @enum {number}
 */
proto.driver.CheckSumType = {
  BIT7: 0,
  BIT8: 1,
  NONE: 2
};

/**
 * @enum {number}
 */
proto.driver.DeviceListChangeType = {
  INIT: 0,
  ADD: 1,
  REMOVE: 2,
  CHANGE: 3
};

/**
 * @enum {number}
 */
proto.driver.DeviceType = {
  YZWKEYBOARD: 0,
  YZWBOOT: 1,
  YZWVENDER: 2
};

/**
 * @enum {number}
 */
proto.driver.LightType = {
  MUSIC2: 0,
  SCREEN: 1,
  OTHER: 2
};

goog.object.extend(exports, proto.driver);
